import asyncio
from pathlib import Path
from aiogram import types, F
from aiogram.filters import Command
from aiogram.types import FSInputFile
from src.config import DOWNLOADS_DIR, REPORTS_DIR, ADMIN_ID
from src.services.transcription import convert_video_to_mp3, split_audio_to_chunks, transcribe_chunks
from src.services.analysis import analyze_transcript
from src.services.reports import save_report
from src.services.cleanup import cleanup_files
from loguru import logger


# ==========================================================
#  –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ (–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∏ —Ç.–ø.)
# ==========================================================
async def process_large_video(video_path: Path, user: types.User, bot):
    video_id = video_path.stem
    audio_path = DOWNLOADS_DIR / f"{video_id}.mp3"
    report_path = REPORTS_DIR / f"report_{video_id}.xlsx"

    try:
        logger.info("{video_id}: –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ MP3...", video_id=video_id)
        await convert_video_to_mp3(video_path, audio_path)
        logger.info("{video_id}: –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ MP3", video_id=video_id)

        logger.info("{video_id}: —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏...", video_id=video_id)
        chunks = await split_audio_to_chunks(audio_path, video_id)
        logger.info("{video_id}: —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ {n} —á–∞–Ω–∫–æ–≤", video_id=video_id, n=len(chunks))

        logger.info("{video_id}: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è...", video_id=video_id)
        transcript = await transcribe_chunks(chunks)
        logger.info("{video_id}: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", video_id=video_id)

        logger.info("{video_id}: –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞...", video_id=video_id)
        analysis = await analyze_transcript(transcript)
        logger.info("{video_id}: –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω", video_id=video_id)

        logger.info("{video_id}: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞...", video_id=video_id)
        save_report(analysis, report_path)
        logger.info("{video_id}: –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω", video_id=video_id)

        logger.info("{video_id}: –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}", 
                    video_id=video_id, user_id=user.id)
        await bot.send_document(chat_id=user.id, document=FSInputFile(report_path))
        logger.info("{video_id}: –æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", video_id=video_id)

    except Exception:
        logger.exception(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ {video_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({name}, @{username})",
            video_id=video_id,
            user_id=user.id,
            name=user.full_name,
            username=user.username or "–±–µ–∑ username"
        )
        await bot.send_message(user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ üòî")

    finally:
        logger.info("{video_id}: –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...", video_id=video_id)
        cleanup_files(video_path, audio_path, report_path, *chunks)
        logger.info("{video_id}: –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", video_id=video_id)


# ==========================================================
#  –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
# ==========================================================
async def register_handlers(dp):

    # /start
    @dp.message(Command("start"))
    async def start(message: types.Message):
        user = message.from_user
        logger.info(
            "–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({name}, @{username})",
            user_id=user.id,
            name=user.full_name,
            username=user.username or "–±–µ–∑ username"
        )
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –≤–∏–¥–µ–æ, –∏ —è –≤–µ—Ä–Ω—É XLSX —Å –∞–Ω–∞–ª–∏–∑–æ–º.")

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –≤–∏–¥–µ–æ
    @dp.message(F.video)
    async def process_video(message: types.Message):
        user = message.from_user
        video_id = message.video.file_unique_id

        logger.info(
            "–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ {video_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({name}, @{username})",
            user_id=user.id,
            name=user.full_name,
            username=user.username or "–±–µ–∑ username",
            video_id=video_id
        )

        # 1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –∫–æ–ø–∏—é –≤–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é USER:<user_id>
        admin_chat_id = int(ADMIN_ID) if ADMIN_ID is not None else ADMIN_ID
        await message.bot.send_video(
            chat_id=admin_chat_id,
            video=message.video.file_id,
            caption=f"USER:{user.id}"
        )
        await message.answer("–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –∂–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏...")

        logger.info("{video_id}: –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∞–¥–º–∏–Ω—É, –æ–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ—Ç Telethon", video_id=video_id)

    # Telethon –ø—Ä–∏—Å–ª–∞–ª —Å–∏–≥–Ω–∞–ª, —á—Ç–æ –≤–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ
    @dp.message(F.text.startswith("VIDEO_READY:"))
    async def handle_video_ready(message: types.Message):
        """
        –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telethon-–∫–ª–∏–µ–Ω—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:
        VIDEO_READY:AgAD1YIAAs-sKEs:7112555885
        –≥–¥–µ 7112555885 ‚Äî —ç—Ç–æ user_id –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        """
        try:
            parts = message.text.split(":")
            if len(parts) != 3:
                logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ VIDEO_READY: {text}", text=message.text)
                return

            _, file_name, user_id_str = parts
            user_id = int(user_id_str)
            video_path = DOWNLOADS_DIR / file_name

            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª VIDEO_READY –¥–ª—è —Ñ–∞–π–ª–∞ {file_name} –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É", file_name=file_name)

            # —Å–æ–∑–¥–∞—ë–º "–≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (aiogram.types.User)
            user = types.User(id=user_id, is_bot=False, first_name="User")

            await message.bot.send_message(chat_id=user_id, text="–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
            await process_large_video(video_path, user, message.bot)

        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ VIDEO_READY —Å–æ–æ–±—â–µ–Ω–∏—è: {text}", text=message.text)
